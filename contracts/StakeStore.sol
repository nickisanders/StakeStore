// SPDX-License-Identifier: MIT
pragma solidity ^0.8.27;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

interface IPendleRouter {
    function deposit(
        address underlyingAsset,
        uint256 amount
    ) external returns (uint256);

    function withdraw(
        address underlyingAsset,
        uint256 amount
    ) external returns (uint256);
}

interface IUniswapV2Router {
    function swapExactTokensForTokens(
        uint256 amountIn,
        uint256 amountOutMin,
        address[] calldata path,
        address to,
        uint256 deadline
    ) external returns (uint256[] memory amounts);
}

contract StakeStore is Ownable {
    struct UserDeposit {
        address user;
        address asset;
        uint256 amount;
        uint256 lockDuration;
        uint256 depositTime;
    }

    struct StakeInfo {
        uint256 depositAmount;
        uint256 ptAmount;
        uint256 ytAmount;
    }

    // === State Variables ===
    address public pendleRouter;
    address public uniswapRouter;
    address public treasuryWallet;

    uint256 public totalDeposits;
    mapping(address => UserDeposit[]) public userDeposits;
    mapping(address => StakeInfo) public userStakes;

    // === Events ===
    event DepositInitiated(
        address indexed user,
        address asset,
        uint256 amount,
        uint256 lockDuration
    );
    event YTSold(address indexed user, uint256 ytAmount, uint256 cashAmount);
    event PointsIssued(address indexed user, uint256 points);
    event FundsWithdrawn(address indexed user, address asset, uint256 amount);

    // === Constructor ===
    constructor(
        address _pendleRouter,
        address _uniswapRouter,
        address _treasuryWallet
    ) Ownable(msg.sender) {
        pendleRouter = _pendleRouter;
        uniswapRouter = _uniswapRouter;
        treasuryWallet = _treasuryWallet;
    }

    // === Deposit Functions ===

    /**
     * @notice Allows a user to deposit supported assets for staking.
     * @param asset The address of the token to deposit.
     * @param amount The amount of the asset to deposit.
     * @param lockDuration The lock duration for the deposit.
     */
    function deposit(
        address asset,
        uint256 amount,
        uint256 lockDuration
    ) external {
        require(amount > 0, "Deposit amount must be greater than zero");
        require(lockDuration > 0, "Lock duration must be specified");

        // Transfer tokens from the user to this contract
        IERC20(asset).transferFrom(msg.sender, address(this), amount);

        // Interact with Pendle to deposit the asset and receive PT and YT
        uint256 ptAmount = IPendleRouter(pendleRouter).deposit(asset, amount);

        // Store the user's deposit information
        UserDeposit memory depositInfo = UserDeposit({
            user: msg.sender,
            asset: asset,
            amount: amount,
            lockDuration: lockDuration,
            depositTime: block.timestamp
        });

        userDeposits[msg.sender].push(depositInfo);

        // Track user's stake information
        userStakes[msg.sender] = StakeInfo({
            depositAmount: amount,
            ptAmount: ptAmount,
            ytAmount: amount - ptAmount // Assuming YT is the difference
        });

        totalDeposits += amount;

        emit DepositInitiated(msg.sender, asset, amount, lockDuration);
    }

    // === Yield Management ===

    /**
     * @notice Sells the Yield Tokens (YT) for cash via Uniswap or another DEX.
     * @param ytAmount The amount of YT to sell.
     * @param token The address of the YT token being converted.
     */
    function _sellYTForCash(uint256 ytAmount, address token) internal {
        require(ytAmount > 0, "No YT tokens to sell");

        // Declare the path as an array of addresses (2 addresses: token â†’ treasury)
        address[] memory path = new address[](2);
        path[0] = token; // YT token address
        path[1] = treasuryWallet; // Treasury wallet receives the cash

        uint256[] memory amounts = IUniswapV2Router(uniswapRouter)
            .swapExactTokensForTokens(
                ytAmount,
                0, // accept any amount
                path,
                treasuryWallet, // cash goes to treasury
                block.timestamp + 3600 // 1 hour deadline
            );

        emit YTSold(msg.sender, ytAmount, amounts[amounts.length - 1]);
    }

    // === Reward Management ===

    /**
     * @notice Issues reward points to a user for selling YT.
     * @param user The address of the user to reward.
     * @param cashAmount The amount of cash generated by the YT sale.
     */
    function _issueRewardPoints(address user, uint256 cashAmount) internal {
        uint256 points = cashAmount / 10; // Example logic: 10% of the cash amount as points
        emit PointsIssued(user, points);
    }

    // === Withdrawal Functions ===

    /**
     * @notice Allows the user to withdraw their principal token (PT) and cash out.
     * @param asset The address of the token to withdraw.
     * @param amount The amount to withdraw.
     */
    function withdraw(address asset, uint256 amount) external {
        require(amount > 0, "Withdrawal amount must be greater than zero");

        // Interact with Pendle to withdraw the principal token (PT) to this contract
        IPendleRouter(pendleRouter).withdraw(asset, amount);

        // Send the asset back to the user
        IERC20(asset).transfer(msg.sender, amount);

        emit FundsWithdrawn(msg.sender, asset, amount);
    }

    // === View Functions ===

    /**
     * @notice Returns the user's deposits.
     * @param user The address of the user.
     * @return UserDeposit[] The list of deposits made by the user.
     */
    function getUserDeposits(
        address user
    ) external view returns (UserDeposit[] memory) {
        return userDeposits[user];
    }

    /**
     * @notice Returns the user's stake information.
     * @param user The address of the user.
     * @return StakeInfo The user's stake info.
     */
    function getUserStake(
        address user
    ) external view returns (StakeInfo memory) {
        return userStakes[user];
    }

    // === Utility Functions ===

    /**
     * @notice Updates the treasury wallet address.
     * @param newTreasuryWallet The new treasury wallet address.
     */
    function updateTreasuryWallet(
        address newTreasuryWallet
    ) external onlyOwner {
        require(newTreasuryWallet != address(0), "Invalid address");
        treasuryWallet = newTreasuryWallet;
    }

    /**
     * @notice Updates the Pendle Router address.
     * @param newPendleRouter The new Pendle Router address.
     */
    function updatePendleRouter(address newPendleRouter) external onlyOwner {
        require(newPendleRouter != address(0), "Invalid address");
        pendleRouter = newPendleRouter;
    }

    /**
     * @notice Updates the Uniswap Router address.
     * @param newUniswapRouter The new Uniswap Router address.
     */
    function updateUniswapRouter(address newUniswapRouter) external onlyOwner {
        require(newUniswapRouter != address(0), "Invalid address");
        uniswapRouter = newUniswapRouter;
    }
}
